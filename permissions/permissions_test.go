package permissions

import (
	"reflect"
	"sort"
	"testing"
)

func TestCategoriesPermissions(t *testing.T) {
	expected := []string{
		"categories.create",
		"categories.read",
		"categories.update",
		"categories.delete",
		"categories.stats.read",
		"categories.stats.sums.read",
	}
	categoriesPerms := categoriesPermissions()()
	if !reflect.DeepEqual(categoriesPerms, expected) {
		t.Errorf("Categories permissions test failed. Expected %s but got %s", expected, categoriesPerms)
	}
}

func TestGetPermissions(t *testing.T) {
	readOnlyPerms := GetPermissions(Whitelist, false)
	expected := []string{
		"access_settings.whitelist.read",
		"access_settings.activity.read",
	}
	if !reflect.DeepEqual(readOnlyPerms, expected) {
		t.Errorf("Categories permissions test failed. Expected %s but got %s", expected, readOnlyPerms)
	}
}

func TestGetAdminPermissions(t *testing.T) {
	expected := []string{
		"access_settings.activity.read",
		"access_settings.whitelist.create",
		"access_settings.whitelist.delete",
		"access_settings.whitelist.read",
		"access_settings.whitelist.update",
		"alerts.create",
		"alerts.delete",
		"alerts.read",
		"alerts.update",
		"api_keys.create",
		"api_keys.delete",
		"api_keys.read",
		"api_keys.update",
		"asm.groups.create",
		"asm.groups.delete",
		"asm.groups.read",
		"asm.groups.update",
		"billing.create",
		"billing.delete",
		"billing.read",
		"billing.update",
		"browsers.stats.read",
		"categories.create",
		"categories.delete",
		"categories.read",
		"categories.stats.read",
		"categories.stats.sums.read",
		"categories.update",
		"clients.desktop.stats.read",
		"clients.phone.stats.read",
		"clients.stats.read",
		"clients.tablet.stats.read",
		"clients.webmail.stats.read",
		"credentials.create",
		"credentials.delete",
		"credentials.read",
		"credentials.update",
		"devices.stats.read",
		"email_activity.read",
		"geo.stats.read",
		"ips.assigned.read",
		"ips.pools.create",
		"ips.pools.delete",
		"ips.pools.ips.create",
		"ips.pools.ips.delete",
		"ips.pools.ips.read",
		"ips.pools.ips.update",
		"ips.pools.read",
		"ips.pools.update",
		"ips.read",
		"ips.warmup.create",
		"ips.warmup.delete",
		"ips.warmup.read",
		"ips.warmup.update",
		"mail.batch.create",
		"mail.batch.delete",
		"mail.batch.read",
		"mail.batch.update",
		"mail.send",
		"mail_settings.address_whitelist.read",
		"mail_settings.address_whitelist.update",
		"mail_settings.bcc.read",
		"mail_settings.bcc.update",
		"mail_settings.bounce_purge.read",
		"mail_settings.bounce_purge.update",
		"mail_settings.footer.read",
		"mail_settings.footer.update",
		"mail_settings.forward_bounce.read",
		"mail_settings.forward_bounce.update",
		"mail_settings.forward_spam.read",
		"mail_settings.forward_spam.update",
		"mail_settings.plain_content.read",
		"mail_settings.plain_content.update",
		"mail_settings.read",
		"mail_settings.spam_check.read",
		"mail_settings.spam_check.update",
		"mail_settings.template.read",
		"mail_settings.template.update",
		"mailbox_providers.stats.read",
		"marketing_campaigns.create",
		"marketing_campaigns.delete",
		"marketing_campaigns.read",
		"marketing_campaigns.update",
		"partner_settings.new_relic.read",
		"partner_settings.new_relic.update",
		"partner_settings.read",
		"partner_settings.sendwithus.read",
		"partner_settings.sendwithus.update",
		"stats.global.read",
		"stats.read",
		"subusers.create",
		"subusers.credits.create",
		"subusers.credits.delete",
		"subusers.credits.read",
		"subusers.credits.remaining.create",
		"subusers.credits.remaining.delete",
		"subusers.credits.remaining.read",
		"subusers.credits.remaining.update",
		"subusers.credits.update",
		"subusers.delete",
		"subusers.monitor.create",
		"subusers.monitor.delete",
		"subusers.monitor.read",
		"subusers.monitor.update",
		"subusers.read",
		"subusers.reputations.read",
		"subusers.stats.monthly.read",
		"subusers.stats.read",
		"subusers.stats.sums.read",
		"subusers.summary.read",
		"subusers.update",
		"suppression.blocks.create",
		"suppression.blocks.delete",
		"suppression.blocks.read",
		"suppression.blocks.update",
		"suppression.bounces.create",
		"suppression.bounces.delete",
		"suppression.bounces.read",
		"suppression.bounces.update",
		"suppression.create",
		"suppression.delete",
		"suppression.invalid_emails.create",
		"suppression.invalid_emails.delete",
		"suppression.invalid_emails.read",
		"suppression.invalid_emails.update",
		"suppression.read",
		"suppression.spam_reports.create",
		"suppression.spam_reports.delete",
		"suppression.spam_reports.read",
		"suppression.spam_reports.update",
		"suppression.unsubscribes.create",
		"suppression.unsubscribes.delete",
		"suppression.unsubscribes.read",
		"suppression.unsubscribes.update",
		"suppression.update",
		"teammates.create",
		"teammates.delete",
		"teammates.read",
		"teammates.update",
		"templates.create",
		"templates.delete",
		"templates.read",
		"templates.update",
		"templates.versions.activate.create",
		"templates.versions.activate.delete",
		"templates.versions.activate.read",
		"templates.versions.activate.update",
		"templates.versions.create",
		"templates.versions.delete",
		"templates.versions.read",
		"templates.versions.update",
		"tracking_settings.click.read",
		"tracking_settings.click.update",
		"tracking_settings.google_analytics.read",
		"tracking_settings.google_analytics.update",
		"tracking_settings.open.read",
		"tracking_settings.open.update",
		"tracking_settings.read",
		"tracking_settings.subscription.read",
		"tracking_settings.subscription.update",
		"user.account.read",
		"user.credits.read",
		"user.email.create",
		"user.email.delete",
		"user.email.read",
		"user.email.update",
		"user.multifactor_authentication.create",
		"user.multifactor_authentication.delete",
		"user.multifactor_authentication.read",
		"user.multifactor_authentication.update",
		"user.password.read",
		"user.password.update",
		"user.profile.read",
		"user.profile.update",
		"user.scheduled_sends.create",
		"user.scheduled_sends.delete",
		"user.scheduled_sends.read",
		"user.scheduled_sends.update",
		"user.settings.enforced_tls.read",
		"user.settings.enforced_tls.update",
		"user.timezone.read",
		"user.timezone.update",
		"user.username.read",
		"user.username.update",
		"user.webhooks.event.settings.read",
		"user.webhooks.event.settings.update",
		"user.webhooks.event.test.create",
		"user.webhooks.event.test.read",
		"user.webhooks.event.test.update",
		"user.webhooks.parse.settings.create",
		"user.webhooks.parse.settings.delete",
		"user.webhooks.parse.settings.read",
		"user.webhooks.parse.settings.update",
		"user.webhooks.parse.stats.read",
		"whitelabel.create",
		"whitelabel.delete",
		"whitelabel.read",
		"whitelabel.update",
	}
	adminPerms := GetAdminPermissions()
	sort.Strings(adminPerms)
	if !reflect.DeepEqual(adminPerms, expected) {
		t.Errorf("TestGetAdminPermissions failed. Expected %s but got %s", expected, adminPerms)
	}
}
