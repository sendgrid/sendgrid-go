/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Suppressions API
* The Twilio SendGrid Suppressions API allows you to manage your Suppressions or Unsubscribes and Suppression or Unsubscribe groups. With SendGrid, an unsubscribe is the action an email recipient takes when they opt-out of receiving your messages. A suppression is the action you take as a sender to filter or suppress an unsubscribed address from your email send. From the perspective of the recipient, your suppression is the result of their unsubscribe.  You can have global suppressions, which represent addresses that have been unsubscribed from all of your emails. You can also have suppression groups, also known as ASM groups, which represent categories or groups of emails that your recipients can unsubscribe from, rather than unsubscribing from all of your messages.  SendGrid automatically suppresses emails sent to users for a variety of reasons, including blocks, bounces, invalid email addresses, spam reports, and unsubscribes. SendGrid suppresses these messages to help you maintain the best possible sender reputation by attempting to prevent unwanted mail. You may also add addresses to your suppressions.  See [**Suppressions**](https://docs.sendgrid.com/for-developers/sending-email/suppressions) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"strings"
)

type GetSuppressionBouncesClassificationsParam struct {
	// Specifies the content type to be returned by this endpoint. You can choose to receive CSV-formatted data by passing \"text/csv\" in the header.
	Accept *Accept1 `json:"Accept"`
	// The classification you want to filter by. Possible values are: `Content`, `Frequency or Volume Too High`, `Invalid Address`, `Mailbox Unavailable`, `Reputation`, `Technical Failure`, `Unclassified`.
	Classification *Classification1 `json:"classification"`
	// The start of the time range, in YYYY-MM-DD format, when a bounce was created (inclusive).
	StartDate *string `json:"start_date,omitempty"`
	// The end of the time range, in YYYY-MM-DD format, when a bounce was created (inclusive).
	EndDate *string `json:"end_date,omitempty"`
	// The `on-behalf-of` header allows you to make API calls from a parent account on behalf of the parent's Subusers or customer accounts. You will use the parent account's API key when using this header. When making a call on behalf of a customer account, the property value should be \"account-id\" followed by the customer account's ID (e.g., `on-behalf-of: account-id <account-id>`). When making a call on behalf of a Subuser, the property value should be the Subuser's username (e.g., `on-behalf-of: <subuser-username>`). See [**On Behalf Of**](https://docs.sendgrid.com/api-reference/how-to-use-the-sendgrid-v3-api/on-behalf-of) for more information.
	Onbehalfof *string `json:"on-behalf-of,omitempty"`
}

func (params *GetSuppressionBouncesClassificationsParam) SetAccept(Accept Accept1) *GetSuppressionBouncesClassificationsParam {
	params.Accept = &Accept
	return params
}
func (params *GetSuppressionBouncesClassificationsParam) SetClassification(Classification Classification1) *GetSuppressionBouncesClassificationsParam {
	params.Classification = &Classification
	return params
}
func (params *GetSuppressionBouncesClassificationsParam) SetStartDate(StartDate string) *GetSuppressionBouncesClassificationsParam {
	params.StartDate = &StartDate
	return params
}
func (params *GetSuppressionBouncesClassificationsParam) SetEndDate(EndDate string) *GetSuppressionBouncesClassificationsParam {
	params.EndDate = &EndDate
	return params
}
func (params *GetSuppressionBouncesClassificationsParam) SetOnbehalfof(Onbehalfof string) *GetSuppressionBouncesClassificationsParam {
	params.Onbehalfof = &Onbehalfof
	return params
}

// This endpoint will return the number of bounces for the classification specified in descending order for each day. You can retrieve the bounce classification totals in CSV format by specifying `\"text/csv\"` in the Accept header.
func (c *ApiService) GetSuppressionBouncesClassifications(params *GetSuppressionBouncesClassificationsParam) (interface{}, error) {
	path := "/v3/suppression/bounces/classifications/{Classification}"
	if params != nil && params.Classification != nil {
		path = strings.Replace(path, "{"+"Classification"+"}", fmt.Sprint(*params.Classification), -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.StartDate != nil {
		data.Set("start_date", *params.StartDate)
	}
	if params != nil && params.EndDate != nil {
		data.Set("end_date", *params.EndDate)
	}

	if params != nil && params.Accept != nil {
		headers["Accept"] = *params.Accept
	}
	if params != nil && params.Onbehalfof != nil {
		headers["on-behalf-of"] = *params.Onbehalfof
	}
	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &GetSuppressionBouncesClassifications200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
