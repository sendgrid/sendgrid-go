/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Statistics API
* The Twilio SendGrid Statistics API allows you to retrieve the various statistics related to your email program.  Tracking your emails is an important part of being a good sender and learning about how your users interact with your email. This includes everything from clicks and opens to looking at which browsers and mailbox providers your customers use.  SendGrid has broken up statistics in specific ways so that you can get at-a-glance data, as well as the details of how your email is being used.  Category statistics are available for the previous thirteen months only.  See [**Statistics Overview**](https://docs.sendgrid.com/ui/analytics-and-reporting/stats-overview) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

type ListClientStatParam struct {
	// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
	StartDate *string `json:"start_date"`
	// The `on-behalf-of` header allows you to make API calls from a parent account on behalf of the parent's Subusers or customer accounts. You will use the parent account's API key when using this header. When making a call on behalf of a customer account, the property value should be \"account-id\" followed by the customer account's ID (e.g., `on-behalf-of: account-id <account-id>`). When making a call on behalf of a Subuser, the property value should be the Subuser's username (e.g., `on-behalf-of: <subuser-username>`). See [**On Behalf Of**](https://docs.sendgrid.com/api-reference/how-to-use-the-sendgrid-v3-api/on-behalf-of) for more information.
	Onbehalfof *string `json:"on-behalf-of,omitempty"`
	// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
	EndDate *string `json:"end_date,omitempty"`
	// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
	AggregatedBy *AggregatedBy2 `json:"aggregated_by,omitempty"`
}

func (params *ListClientStatParam) SetStartDate(StartDate string) *ListClientStatParam {
	params.StartDate = &StartDate
	return params
}
func (params *ListClientStatParam) SetOnbehalfof(Onbehalfof string) *ListClientStatParam {
	params.Onbehalfof = &Onbehalfof
	return params
}
func (params *ListClientStatParam) SetEndDate(EndDate string) *ListClientStatParam {
	params.EndDate = &EndDate
	return params
}
func (params *ListClientStatParam) SetAggregatedBy(AggregatedBy AggregatedBy2) *ListClientStatParam {
	params.AggregatedBy = &AggregatedBy
	return params
}

// **This endpoint allows you to retrieve your email statistics segmented by client type.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).
func (c *ApiService) ListClientStat(params *ListClientStatParam) (interface{}, error) {
	path := "/v3/clients/stats"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.StartDate != nil {
		data.Set("start_date", *params.StartDate)
	}
	if params != nil && params.EndDate != nil {
		data.Set("end_date", *params.EndDate)
	}
	if params != nil && params.AggregatedBy != nil {
		data.Set("aggregated_by", fmt.Sprint(*params.AggregatedBy))
	}

	if params != nil && params.Onbehalfof != nil {
		headers["on-behalf-of"] = *params.Onbehalfof
	}
	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &[]ListClientStat200ResponseInner{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
