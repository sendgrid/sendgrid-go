/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Statistics API
* The Twilio SendGrid Statistics API allows you to retrieve the various statistics related to your email program.  Tracking your emails is an important part of being a good sender and learning about how your users interact with your email. This includes everything from clicks and opens to looking at which browsers and mailbox providers your customers use.  SendGrid has broken up statistics in specific ways so that you can get at-a-glance data, as well as the details of how your email is being used.  Category statistics are available for the previous thirteen months only.  See [**Statistics Overview**](https://docs.sendgrid.com/ui/analytics-and-reporting/stats-overview) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
)

type ListCategoryStatSumParam struct {
	// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
	StartDate *string `json:"start_date"`
	// The metric that you want to sort by.  Must be a single metric.
	SortByMetric *string `json:"sort_by_metric,omitempty"`
	// The direction you want to sort.
	SortByDirection *SortByDirection `json:"sort_by_direction,omitempty"`
	// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
	EndDate *string `json:"end_date,omitempty"`
	// Limits the number of results returned.
	Limit *int32 `json:"limit,omitempty"`
	// The point in the list to begin retrieving results.
	Offset *int32 `json:"offset,omitempty"`
	// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
	AggregatedBy *AggregatedBy1 `json:"aggregated_by,omitempty"`
	// The `on-behalf-of` header allows you to make API calls from a parent account on behalf of the parent's Subusers or customer accounts. You will use the parent account's API key when using this header. When making a call on behalf of a customer account, the property value should be \"account-id\" followed by the customer account's ID (e.g., `on-behalf-of: account-id <account-id>`). When making a call on behalf of a Subuser, the property value should be the Subuser's username (e.g., `on-behalf-of: <subuser-username>`). See [**On Behalf Of**](https://docs.sendgrid.com/api-reference/how-to-use-the-sendgrid-v3-api/on-behalf-of) for more information.
	Onbehalfof *string `json:"on-behalf-of,omitempty"`
}

func (params *ListCategoryStatSumParam) SetStartDate(StartDate string) *ListCategoryStatSumParam {
	params.StartDate = &StartDate
	return params
}
func (params *ListCategoryStatSumParam) SetSortByMetric(SortByMetric string) *ListCategoryStatSumParam {
	params.SortByMetric = &SortByMetric
	return params
}
func (params *ListCategoryStatSumParam) SetSortByDirection(SortByDirection SortByDirection) *ListCategoryStatSumParam {
	params.SortByDirection = &SortByDirection
	return params
}
func (params *ListCategoryStatSumParam) SetEndDate(EndDate string) *ListCategoryStatSumParam {
	params.EndDate = &EndDate
	return params
}
func (params *ListCategoryStatSumParam) SetLimit(Limit int32) *ListCategoryStatSumParam {
	params.Limit = &Limit
	return params
}
func (params *ListCategoryStatSumParam) SetOffset(Offset int32) *ListCategoryStatSumParam {
	params.Offset = &Offset
	return params
}
func (params *ListCategoryStatSumParam) SetAggregatedBy(AggregatedBy AggregatedBy1) *ListCategoryStatSumParam {
	params.AggregatedBy = &AggregatedBy
	return params
}
func (params *ListCategoryStatSumParam) SetOnbehalfof(Onbehalfof string) *ListCategoryStatSumParam {
	params.Onbehalfof = &Onbehalfof
	return params
}

// **This endpoint allows you to retrieve the total sum of each email statistic for every category over the given date range.**  If you do not define any query parameters, this endpoint will return a sum for each category in groups of 10.
func (c *ApiService) ListCategoryStatSum(params *ListCategoryStatSumParam) (interface{}, error) {
	path := "/v3/categories/stats/sums"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.StartDate != nil {
		data.Set("start_date", *params.StartDate)
	}
	if params != nil && params.SortByMetric != nil {
		data.Set("sort_by_metric", *params.SortByMetric)
	}
	if params != nil && params.SortByDirection != nil {
		data.Set("sort_by_direction", fmt.Sprint(*params.SortByDirection))
	}
	if params != nil && params.EndDate != nil {
		data.Set("end_date", *params.EndDate)
	}
	if params != nil && params.Limit != nil {
		data.Set("limit", fmt.Sprint(*params.Limit))
	}
	if params != nil && params.Offset != nil {
		data.Set("offset", fmt.Sprint(*params.Offset))
	}
	if params != nil && params.AggregatedBy != nil {
		data.Set("aggregated_by", fmt.Sprint(*params.AggregatedBy))
	}

	if params != nil && params.Onbehalfof != nil {
		headers["on-behalf-of"] = *params.Onbehalfof
	}
	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &CategoryStats{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return nil, nil
}
