/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Marketing Campaigns Lists API
* The Twilio SendGrid Marketing Campaigns Lists API allows you to manage your contacts lists programmatically. Lists are static collections of Marketing Campaigns contacts. You can use this API to interact with the list objects themselves. To add contacts to a list, you must use the [Contacts API](https://docs.sendgrid.com/api-reference/contacts/).  You can also manage your lists using the Contacts menu in the [Marketing Campaigns application user interface](https://mc.sendgrid.com/contacts). For more information about lists and best practices for building them, see [**Building your Contact Lists**](https://sendgrid.com/docs/ui/managing-contacts/building-your-contact-list/).
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"strings"
)

type DeleteMarketingListParam struct {
	// The ID of the list on which you want to perform the operation.
	Id *string `json:"id"`
	// Flag indicates that all contacts on the list are also to be deleted.
	DeleteContacts *bool `json:"delete_contacts,omitempty"`
}

func (params *DeleteMarketingListParam) SetId(Id string) *DeleteMarketingListParam {
	params.Id = &Id
	return params
}
func (params *DeleteMarketingListParam) SetDeleteContacts(DeleteContacts bool) *DeleteMarketingListParam {
	params.DeleteContacts = &DeleteContacts
	return params
}

// **This endpoint allows you to deletes a specific list.**  Optionally, you can also delete contacts associated to the list. The query parameter, `delete_contacts=true`, will delete the list and start an asynchronous job to delete associated contacts.
func (c *ApiService) DeleteMarketingList(params *DeleteMarketingListParam) (interface{}, error) {
	path := "/v3/marketing/lists/{Id}"
	if params != nil && params.Id != nil {
		path = strings.Replace(path, "{"+"Id"+"}", *params.Id, -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.DeleteContacts != nil {
		data.Set("delete_contacts", fmt.Sprint(*params.DeleteContacts))
	}

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &DeleteMarketingList200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 204 {
		s := ""
		ps := &s
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &DeleteMarketingList404Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
