/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid IP Address API
* The Twilio SendGrid IP Address API allows you to add and manage dedicated IP addresses and IP Pools for your SendGrid account and Subusers. If you are sending any significant amount of email, SendGrid typically suggests sending from dedicated IPs. It's also best to send marketing and transactional emails from separate IP addresses. In order to do this, you'll need to set up IP Pools, which are groups of dedicated IP addresses you define to send particular types of messages. See the [**Dedicated IP Addresses**](https://docs.sendgrid.com/ui/account-and-settings/dedicated-ip-addresses) for more information about obtaining and allocating IPs.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"net/url"
)

type CreateIpPoolParam struct {
	//
	CreateIpPoolRequest *CreateIpPoolRequest `json:"CreateIpPoolRequest,omitempty"`
}

func (params *CreateIpPoolParam) SetCreateIpPoolRequest(CreateIpPoolRequest CreateIpPoolRequest) *CreateIpPoolParam {
	params.CreateIpPoolRequest = &CreateIpPoolRequest
	return params
}

// **This endpoint allows you to create an IP pool.**  Before you can create an IP pool, you need to activate the IP in your SendGrid account:   1. Log into your SendGrid account.   1. Navigate to **Settings** and then select **IP Addresses**.   1. Find the IP address you want to activate and then click **Edit**.   1. Check **Allow my account to send mail using this IP address**. 1. Click **Save**.
func (c *ApiService) CreateIpPool(params *CreateIpPoolParam) (interface{}, error) {
	path := "/v3/ips/pools"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/json",
	}

	body := []byte{}
	if params != nil && params.CreateIpPoolRequest != nil {
		b, err := json.Marshal(*params.CreateIpPoolRequest)
		if err != nil {
			return nil, err
		}
		body = b
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers, body...)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &IpPools200{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
