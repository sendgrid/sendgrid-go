/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid IP Address API
* The Twilio SendGrid IP Address API allows you to add and manage dedicated IP addresses and IP Pools for your SendGrid account and Subusers. If you are sending any significant amount of email, SendGrid typically suggests sending from dedicated IPs. It's also best to send marketing and transactional emails from separate IP addresses. In order to do this, you'll need to set up IP Pools, which are groups of dedicated IP addresses you define to send particular types of messages. See the [**Dedicated IP Addresses**](https://docs.sendgrid.com/ui/account-and-settings/dedicated-ip-addresses) for more information about obtaining and allocating IPs.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/url"

	"strings"
)

type DeleteIpFromIpPoolParam struct {
	// The name of the IP pool that you are removing the IP address from.
	PoolName *string `json:"pool_name"`
	// The IP address that you wish to remove.
	Ip *string `json:"ip"`
}

func (params *DeleteIpFromIpPoolParam) SetPoolName(PoolName string) *DeleteIpFromIpPoolParam {
	params.PoolName = &PoolName
	return params
}
func (params *DeleteIpFromIpPoolParam) SetIp(Ip string) *DeleteIpFromIpPoolParam {
	params.Ip = &Ip
	return params
}

// **This endpoint allows you to remove an IP address from an IP pool.**
func (c *ApiService) DeleteIpFromIpPool(params *DeleteIpFromIpPoolParam) (interface{}, error) {
	path := "/v3/ips/pools/{PoolName}/ips/{Ip}"
	if params != nil && params.PoolName != nil {
		path = strings.Replace(path, "{"+"PoolName"+"}", *params.PoolName, -1)
	}
	if params != nil && params.Ip != nil {
		path = strings.Replace(path, "{"+"Ip"+"}", *params.Ip, -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 204 {
		ps := &map[string]interface{}{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &DeleteIpFromIpPool404Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return nil, nil
}
