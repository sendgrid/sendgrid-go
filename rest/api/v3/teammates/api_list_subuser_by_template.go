/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Teammates API
* The Twilio SendGrid Teammates API allows you to add, manage, and remove Teammates, or user accounts, from your SendGrid account. Teammates function like user accounts on the SendGrid account, allowing you to invite additional users to your account with scoped access. You can think of Teammates as SendGrid's approach to enabling [role-based access control](https://en.wikipedia.org/wiki/Role-based_access_control) for your SendGrid account. For even more control over the access to your account, see the [Twilio SendGrid SSO API](https://docs.sendgrid.com/api-reference/single-sign-on-teammates/), which enables SSO-authenticated Teammates to be managed through a SAML 2.0 identity provider.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"

	"strings"
)

type ListSubuserByTemplateParam struct {
	// The username of the Teammate for whom you want to retrieve Subuser access information.
	TeammateName *string `json:"teammate_name"`
	// The Subuser ID from which the API request will begin retrieving Subusers. This query parameter can be used in successive API calls to retrieve additional Subusers.
	AfterSubuserId *int32 `json:"after_subuser_id,omitempty"`
	// Limit the number of Subusers to be returned. The default `limit` is `100` per request.
	Limit *int32 `json:"limit,omitempty"`
	// A Subuser's username that will be used to filter the returned result.
	Username *string `json:"username,omitempty"`
}

func (params *ListSubuserByTemplateParam) SetTeammateName(TeammateName string) *ListSubuserByTemplateParam {
	params.TeammateName = &TeammateName
	return params
}
func (params *ListSubuserByTemplateParam) SetAfterSubuserId(AfterSubuserId int32) *ListSubuserByTemplateParam {
	params.AfterSubuserId = &AfterSubuserId
	return params
}
func (params *ListSubuserByTemplateParam) SetLimit(Limit int32) *ListSubuserByTemplateParam {
	params.Limit = &Limit
	return params
}
func (params *ListSubuserByTemplateParam) SetUsername(Username string) *ListSubuserByTemplateParam {
	params.Username = &Username
	return params
}

// **This operation allows you to retrieve the Subusers that can be accessed by a specified Teammate.**  This operation will return the Subusers available to a Teammate, including the scopes available. If the Teammate is an administrator, all Subusers will be returned.
func (c *ApiService) ListSubuserByTemplate(params *ListSubuserByTemplateParam) (interface{}, error) {
	path := "/v3/teammates/{TeammateName}/subuser_access"
	if params != nil && params.TeammateName != nil {
		path = strings.Replace(path, "{"+"TeammateName"+"}", *params.TeammateName, -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.AfterSubuserId != nil {
		data.Set("after_subuser_id", fmt.Sprint(*params.AfterSubuserId))
	}
	if params != nil && params.Limit != nil {
		data.Set("limit", fmt.Sprint(*params.Limit))
	}
	if params != nil && params.Username != nil {
		data.Set("username", *params.Username)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &ListSubuserByTemplate200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 400 {
		ps := &ListSubuserByTemplate400Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 401 {
		ps := &ListSubuserByTemplate400Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 403 {
		ps := &ListSubuserByTemplate400Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 500 {
		ps := &ListSubuserByTemplate400Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return nil, nil
}
