/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Webhook Configuration API
* The Twilio SendGrid Webhooks API allows you to configure the Event and Parse Webhooks.  Email is a data-rich channel, and implementing the Event Webhook will allow you to consume those data in nearly real time. This means you can actively monitor and participate in the health of your email program throughout the send cycle.  The Inbound Parse Webhook processes all incoming email for a domain or subdomain, parses the contents and attachments and then POSTs `multipart/form-data` to a URL that you choose.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"net/url"
)

type CreateSecurityPolicyParam struct {
	// The `on-behalf-of` header allows you to make API calls from a parent account on behalf of the parent's Subusers or customer accounts. You will use the parent account's API key when using this header. When making a call on behalf of a customer account, the property value should be \"account-id\" followed by the customer account's ID (e.g., `on-behalf-of: account-id <account-id>`). When making a call on behalf of a Subuser, the property value should be the Subuser's username (e.g., `on-behalf-of: <subuser-username>`). See [**On Behalf Of**](https://docs.sendgrid.com/api-reference/how-to-use-the-sendgrid-v3-api/on-behalf-of) for more information.
	Onbehalfof *string `json:"on-behalf-of,omitempty"`
	//
	CreateSecurityPolicyRequest *CreateSecurityPolicyRequest `json:"CreateSecurityPolicyRequest,omitempty"`
}

func (params *CreateSecurityPolicyParam) SetOnbehalfof(Onbehalfof string) *CreateSecurityPolicyParam {
	params.Onbehalfof = &Onbehalfof
	return params
}
func (params *CreateSecurityPolicyParam) SetCreateSecurityPolicyRequest(CreateSecurityPolicyRequest CreateSecurityPolicyRequest) *CreateSecurityPolicyParam {
	params.CreateSecurityPolicyRequest = &CreateSecurityPolicyRequest
	return params
}

// Create a new webhook security policy. Note: One of signature or oauth must be given to have a valid security policy.
func (c *ApiService) CreateSecurityPolicy(params *CreateSecurityPolicyParam) (interface{}, error) {
	path := "/v3/user/webhooks/security/policies"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/json",
	}

	body := []byte{}
	if params != nil && params.CreateSecurityPolicyRequest != nil {
		b, err := json.Marshal(*params.CreateSecurityPolicyRequest)
		if err != nil {
			return nil, err
		}
		body = b
	}

	if params != nil && params.Onbehalfof != nil {
		headers["on-behalf-of"] = *params.Onbehalfof
	}
	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers, body...)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 201 {
		ps := &CreateSecurityPolicy201Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
