/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Marketing Campaigns Single Sends API
* The Twilio SendGrid Single Sends API allows you to create, manage, and send Single Sends. You can also search Single Sends and retrieve statistics about them to help you maintain, alter, and further develop your campaigns.  A Single Send is a one-time non-automated email message delivered to a list or segment of your audience. A Single Send may be sent immediately or scheduled for future delivery.  Single Sends can serve many use cases, including promotional offers, engagement campaigns, newsletters, announcements, legal notices, or policy updates. You can also create and manage Single Sends in the [Marketing Campaigns application user interface](https://mc.sendgrid.com/single-sends).  The Single Sends API changed on May 6, 2020. See [**Single Sends 2020 Update**](https://docs.sendgrid.com/for-developers/sending-email/single-sends-2020-update) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

type SearchSingleSendParam struct {
	//
	PageSize *int32 `json:"page_size,omitempty"`
	//
	PageToken *string `json:"page_token,omitempty"`
	//
	SinglesendSearch *SinglesendSearch `json:"SinglesendSearch,omitempty"`
}

func (params *SearchSingleSendParam) SetPageSize(PageSize int32) *SearchSingleSendParam {
	params.PageSize = &PageSize
	return params
}
func (params *SearchSingleSendParam) SetPageToken(PageToken string) *SearchSingleSendParam {
	params.PageToken = &PageToken
	return params
}
func (params *SearchSingleSendParam) SetSinglesendSearch(SinglesendSearch SinglesendSearch) *SearchSingleSendParam {
	params.SinglesendSearch = &SinglesendSearch
	return params
}

// **This endpoint allows you to search for Single Sends based on specified criteria.**  You can search for Single Sends by passing a combination of values using the `name`, `status`, and `categories` request body fields.  For example, if you want to search for all Single Sends that are \"drafts\" or \"scheduled\" and also associated with the category \"shoes,\" your request body may look like the example below.  ```javascript {   \"status\": [     \"draft\",     \"scheduled\"   ],   \"categories\": [     \"shoes\"   ], } ```
func (c *ApiService) SearchSingleSend(params *SearchSingleSendParam) (interface{}, error) {
	path := "/v3/marketing/singlesends/search"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/json",
	}

	if params != nil && params.PageSize != nil {
		data.Set("page_size", fmt.Sprint(*params.PageSize))
	}
	if params != nil && params.PageToken != nil {
		data.Set("page_token", *params.PageToken)
	}
	body := []byte{}
	if params != nil && params.SinglesendSearch != nil {
		b, err := json.Marshal(*params.SinglesendSearch)
		if err != nil {
			return nil, err
		}
		body = b
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers, body...)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &ListSingleSend200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &ListSingleSend500Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
