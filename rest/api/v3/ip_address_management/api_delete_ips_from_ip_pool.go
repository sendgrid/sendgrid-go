/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid IP Address Management API
* The Twilio SendGrid IP Address Management API combines functionality that was previously split between the Twilio SendGrid [IP Address API](https://docs.sendgrid.com/api-reference/ip-address) and [IP Pools API](https://docs.sendgrid.com/api-reference/ip-pools). This functionality includes adding IP addresses to your account, assigning IP addresses to IP Pools and Subusers, among other tasks.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/url"

	"strings"
)

type DeleteIpsFromIpPoolParam struct {
	// Specifies the unique ID for an IP Pool.
	Poolid *string `json:"poolid"`
	//
	DeleteIpsFromIpPoolRequest *DeleteIpsFromIpPoolRequest `json:"DeleteIpsFromIpPoolRequest,omitempty"`
}

func (params *DeleteIpsFromIpPoolParam) SetPoolid(Poolid string) *DeleteIpsFromIpPoolParam {
	params.Poolid = &Poolid
	return params
}
func (params *DeleteIpsFromIpPoolParam) SetDeleteIpsFromIpPoolRequest(DeleteIpsFromIpPoolRequest DeleteIpsFromIpPoolRequest) *DeleteIpsFromIpPoolParam {
	params.DeleteIpsFromIpPoolRequest = &DeleteIpsFromIpPoolRequest
	return params
}

// This operation removes a batch of IPs from an IP Pool. All IPs associated with the Pool will be unassigned from the deleted Pool. However, this operation does not remove the IPs from your account.
func (c *ApiService) DeleteIpsFromIpPool(params *DeleteIpsFromIpPoolParam) (interface{}, error) {
	path := "/v3/send_ips/pools/{Poolid}/ips:batchDelete"
	if params != nil && params.Poolid != nil {
		path = strings.Replace(path, "{"+"Poolid"+"}", *params.Poolid, -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/json",
	}

	body := []byte{}
	if params != nil && params.DeleteIpsFromIpPoolRequest != nil {
		b, err := json.Marshal(*params.DeleteIpsFromIpPoolRequest)
		if err != nil {
			return nil, err
		}
		body = b
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers, body...)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 400 {
		ps := &IpAddressManagementErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 401 {
		ps := &IpAddressManagementErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 500 {
		ps := &IpAddressManagementErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return nil, nil
}
