/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Verified Senders API
* The Twilio SendGrid Verified Senders API allows you to programmatically manage the Sender Identities that are authorized to send email for your account. You can also manage Sender Identities in the [SendGrid application user interface](https://app.sendgrid.com/settings/sender_auth). See [**Single Sender Verification**](https://sendgrid.com/docs/ui/sending-email/sender-verification/) for more information.  You an use this API to create new Sender Identities, retrieve a list of existing Sender Identities, check the status of a Sender Identity, update a Sender Identity, and delete a Sender Identity.  This API offers additional operations to check for domains known to implement DMARC and resend verification emails to Sender Identities that have yet to complete the verification process.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

type ListVerifiedSenderParam struct {
	// Specifies the number of results to be returned by the API. This parameter can be used to limit the results returned or in combination with the `lastSeenID` parameter to iterate through paginated results.
	Limit *float32 `json:"limit,omitempty"`
	// Returns senders with an ID number occurring after the passed in ID. In other words, the `lastSeenID` provides a starting point from which SendGrid will iterate to find Sender Identities associated with your account.
	LastSeenID *float32 `json:"lastSeenID,omitempty"`
	// Returns information about only the Sender Identity passed in the request.
	Id *int32 `json:"id,omitempty"`
}

func (params *ListVerifiedSenderParam) SetLimit(Limit float32) *ListVerifiedSenderParam {
	params.Limit = &Limit
	return params
}
func (params *ListVerifiedSenderParam) SetLastSeenID(LastSeenID float32) *ListVerifiedSenderParam {
	params.LastSeenID = &LastSeenID
	return params
}
func (params *ListVerifiedSenderParam) SetId(Id int32) *ListVerifiedSenderParam {
	params.Id = &Id
	return params
}

// **This endpoint allows you to retrieve all the Sender Identities associated with an account.**  This endpoint will return both verified and unverified senders.  You can limit the number of results returned using the `limit`, `lastSeenID`, and `id` query string parameters.  * `limit` allows you to specify an exact number of Sender Identities to return. * `lastSeenID` will return senders with an ID number occuring after the passed in ID. In other words, the `lastSeenID` provides a starting point from which SendGrid will iterate to find Sender Identities associated with your account. * `id` will return information about only the Sender Identity passed in the request.
func (c *ApiService) ListVerifiedSender(params *ListVerifiedSenderParam) (interface{}, error) {
	path := "/v3/verified_senders"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.Limit != nil {
		data.Set("limit", fmt.Sprint(*params.Limit))
	}
	if params != nil && params.LastSeenID != nil {
		data.Set("lastSeenID", fmt.Sprint(*params.LastSeenID))
	}
	if params != nil && params.Id != nil {
		data.Set("id", fmt.Sprint(*params.Id))
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &ListVerifiedSender200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 401 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 403 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
