/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Legacy Marketing Campaigns Contacts API
* The Twilio SendGrid Legacy Marketing Campaigns Contacts API allows you to manage your marketing contacts programmatically. This API is operational, but we recommend using the current version of Marketing Campaigns' [Contacts API](https://docs.sendgrid.com/api-reference/contacts/), [Lists API](https://docs.sendgrid.com/api-reference/lists/), and [Segments API](https://docs.sendgrid.com/api-reference/segmenting-contacts-v2/) to manage your contacts.  See [**Migrating from Legacy Marketing Campaigns**](https://docs.sendgrid.com/ui/sending-email/migrating-from-legacy-marketing-campaigns) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"net/url"
)

type SearchRecipientParam struct {
	//
	SearchRecipientRequest *SearchRecipientRequest `json:"SearchRecipientRequest,omitempty"`
}

func (params *SearchRecipientParam) SetSearchRecipientRequest(SearchRecipientRequest SearchRecipientRequest) *SearchRecipientParam {
	params.SearchRecipientRequest = &SearchRecipientRequest
	return params
}

// Search using segment conditions without actually creating a segment. Body contains a JSON object with `conditions`, a list of conditions as described below, and an optional `list_id`, which is a valid list ID for a list to limit the search on.  Valid operators for create and update depend on the type of the field for which you are searching.  - Dates:   - `\"eq\"`, `\"ne\"`, `\"lt\"` (before), `\"gt\"` (after)     - You may use MM/DD/YYYY for day granularity or an epoch for second granularity.   - `\"empty\"`, `\"not_empty\"`   - `\"is within\"`     - You may use an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date format or the # of days. - Text: `\"contains\"`, `\"eq\"` (is - matches the full field), `\"ne\"` (is not - matches any field where the entire field is not the condition value), `\"empty\"`, `\"not_empty\"` - Numbers: `\"eq\"`, `\"lt\"`, `\"gt\"`, `\"empty\"`, `\"not_empty\"` - Email Clicks and Opens: `\"eq\"` (opened), `\"ne\"` (not opened)  Field values must all be a string.  Search conditions using `\"eq\"` or `\"ne\"` for email clicks and opens should provide a \"field\" of either `clicks.campaign_identifier` or `opens.campaign_identifier`.  The condition value should be a string containing the id of a completed campaign.  Search conditions list may contain multiple conditions, joined by an `\"and\"` or `\"or\"` in the `\"and_or\"` field.  The first condition in the conditions list must have an empty `\"and_or\"`, and subsequent conditions must all specify an `\"and_or\"`.
func (c *ApiService) SearchRecipient(params *SearchRecipientParam) (interface{}, error) {
	path := "/v3/contactdb/recipients/search"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/json",
	}

	body := []byte{}
	if params != nil && params.SearchRecipientRequest != nil {
		b, err := json.Marshal(*params.SearchRecipientRequest)
		if err != nil {
			return nil, err
		}
		body = b
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers, body...)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &SearchRecipient200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
