/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Legacy Marketing Campaigns Contacts API
* The Twilio SendGrid Legacy Marketing Campaigns Contacts API allows you to manage your marketing contacts programmatically. This API is operational, but we recommend using the current version of Marketing Campaigns' [Contacts API](https://docs.sendgrid.com/api-reference/contacts/), [Lists API](https://docs.sendgrid.com/api-reference/lists/), and [Segments API](https://docs.sendgrid.com/api-reference/segmenting-contacts-v2/) to manage your contacts.  See [**Migrating from Legacy Marketing Campaigns**](https://docs.sendgrid.com/ui/sending-email/migrating-from-legacy-marketing-campaigns) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"

	"strings"
)

type ListRecipientsFromContactDbListParam struct {
	// The id of the list of recipients you want to retrieve.
	ListId *int32 `json:"list_id"`
	// Page index of first recipient to return (must be a positive integer)
	Page *int32 `json:"page,omitempty"`
	// Number of recipients to return at a time (must be a positive integer between 1 and 1000)
	PageSize *int32 `json:"page_size,omitempty"`
	// The `on-behalf-of` header allows you to make API calls from a parent account on behalf of the parent's Subusers or customer accounts. You will use the parent account's API key when using this header. When making a call on behalf of a customer account, the property value should be \"account-id\" followed by the customer account's ID (e.g., `on-behalf-of: account-id <account-id>`). When making a call on behalf of a Subuser, the property value should be the Subuser's username (e.g., `on-behalf-of: <subuser-username>`). See [**On Behalf Of**](https://docs.sendgrid.com/api-reference/how-to-use-the-sendgrid-v3-api/on-behalf-of) for more information.
	Onbehalfof *string `json:"on-behalf-of,omitempty"`
}

func (params *ListRecipientsFromContactDbListParam) SetListId(ListId int32) *ListRecipientsFromContactDbListParam {
	params.ListId = &ListId
	return params
}
func (params *ListRecipientsFromContactDbListParam) SetPage(Page int32) *ListRecipientsFromContactDbListParam {
	params.Page = &Page
	return params
}
func (params *ListRecipientsFromContactDbListParam) SetPageSize(PageSize int32) *ListRecipientsFromContactDbListParam {
	params.PageSize = &PageSize
	return params
}
func (params *ListRecipientsFromContactDbListParam) SetOnbehalfof(Onbehalfof string) *ListRecipientsFromContactDbListParam {
	params.Onbehalfof = &Onbehalfof
	return params
}

// **This endpoint allows you to retrieve all recipients on the list with the given ID.**
func (c *ApiService) ListRecipientsFromContactDbList(params *ListRecipientsFromContactDbListParam) (interface{}, error) {
	path := "/v3/contactdb/lists/{ListId}/recipients"
	if params != nil && params.ListId != nil {
		path = strings.Replace(path, "{"+"ListId"+"}", fmt.Sprint(*params.ListId), -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.Page != nil {
		data.Set("page", fmt.Sprint(*params.Page))
	}
	if params != nil && params.PageSize != nil {
		data.Set("page_size", fmt.Sprint(*params.PageSize))
	}

	if params != nil && params.Onbehalfof != nil {
		headers["on-behalf-of"] = *params.Onbehalfof
	}
	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &ListRecipientsFromContactDbList200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 400 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &map[string]interface{}{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return nil, nil
}
