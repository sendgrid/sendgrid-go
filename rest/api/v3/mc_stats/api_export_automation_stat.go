/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Marketing Campaigns Statistics API
* The Marketing Campaigns Stats API allows you to retrieve statistics for both Automations and Single Sends. The statistics provided include bounces, clicks, opens, and more. You can export stats in CSV format for use in other applications. You can also retrieve Marketing Campaigns stats in the [Marketing Campaigns application user interface](https://mc.sendgrid.com/).  This API provides statistics for Marketing Campaigns only. For stats related to event tracking, please see the [Stats API](https://docs.sendgrid.com/api-reference/stats).
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"net/url"
)

type ExportAutomationStatParam struct {
	// The IDs of Single Sends for which to export stats.
	Ids *[]string `json:"ids,omitempty"`
	// The [IANA Area/Region](https://en.wikipedia.org/wiki/Tz_database#Names_of_timezones) string representing the timezone in which the stats are to be presented; i.e. `\"America/Chicago\"`. This parameter changes the timezone format only; it does not alter which stats are returned.
	Timezone *string `json:"timezone,omitempty"`
}

func (params *ExportAutomationStatParam) SetIds(Ids []string) *ExportAutomationStatParam {
	params.Ids = &Ids
	return params
}
func (params *ExportAutomationStatParam) SetTimezone(Timezone string) *ExportAutomationStatParam {
	params.Timezone = &Timezone
	return params
}

// **This endpoint allows you to export Single Send stats as .CSV data**.  You can specify one Single Send or many: include as many Single Send IDs as you need, separating them with commas, as the value of the `ids` query string parameter.  The data is returned as plain text response but in .CSV format, so your application making the call can present the information in whatever way is most appropriate, or just save the data as a .csv file.
func (c *ApiService) ExportAutomationStat(params *ExportAutomationStatParam) (interface{}, error) {
	path := "/v3/marketing/stats/automations/export"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.Ids != nil {
		for _, item := range *params.Ids {
			v, err := json.Marshal(item)

			if err != nil {
				return nil, err
			}

			data.Add("ids", string(v))

		}
	}
	if params != nil && params.Timezone != nil {
		data.Set("timezone", *params.Timezone)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		s := ""
		ps := &s
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
