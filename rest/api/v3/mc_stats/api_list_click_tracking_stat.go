/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Marketing Campaigns Statistics API
* The Marketing Campaigns Stats API allows you to retrieve statistics for both Automations and Single Sends. The statistics provided include bounces, clicks, opens, and more. You can export stats in CSV format for use in other applications. You can also retrieve Marketing Campaigns stats in the [Marketing Campaigns application user interface](https://mc.sendgrid.com/).  This API provides statistics for Marketing Campaigns only. For stats related to event tracking, please see the [Stats API](https://docs.sendgrid.com/api-reference/stats).
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"strings"
)

type ListClickTrackingStatParam struct {
	// The ID of the Automation you want to get click tracking stats for.
	Id *string `json:"id"`
	// Automations can have multiple steps. Including `step_id` as a `group_by` metric allows further granularity of stats.
	GroupBy *[]Items `json:"group_by,omitempty"`
	// Comma-separated list of `step_ids` that you want the link stats for.
	StepIds *[]string `json:"step_ids,omitempty"`
	// The number of elements you want returned on each page.
	PageSize *int32 `json:"page_size,omitempty"`
	// The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.
	PageToken *string `json:"page_token,omitempty"`
}

func (params *ListClickTrackingStatParam) SetId(Id string) *ListClickTrackingStatParam {
	params.Id = &Id
	return params
}
func (params *ListClickTrackingStatParam) SetGroupBy(GroupBy []Items) *ListClickTrackingStatParam {
	params.GroupBy = &GroupBy
	return params
}
func (params *ListClickTrackingStatParam) SetStepIds(StepIds []string) *ListClickTrackingStatParam {
	params.StepIds = &StepIds
	return params
}
func (params *ListClickTrackingStatParam) SetPageSize(PageSize int32) *ListClickTrackingStatParam {
	params.PageSize = &PageSize
	return params
}
func (params *ListClickTrackingStatParam) SetPageToken(PageToken string) *ListClickTrackingStatParam {
	params.PageToken = &PageToken
	return params
}

// **This endpoint lets you retrieve click-tracking stats for a single Automation**.  The stats returned list the URLs embedded in your Automation and the number of clicks each one received.
func (c *ApiService) ListClickTrackingStat(params *ListClickTrackingStatParam) (interface{}, error) {
	path := "/v3/marketing/stats/automations/{Id}/links"
	if params != nil && params.Id != nil {
		path = strings.Replace(path, "{"+"Id"+"}", *params.Id, -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.GroupBy != nil {
		for _, item := range *params.GroupBy {
			v, err := json.Marshal(item)

			if err != nil {
				return nil, err
			}

			data.Add("group_by", string(v))

		}
	}
	if params != nil && params.StepIds != nil {
		for _, item := range *params.StepIds {
			v, err := json.Marshal(item)

			if err != nil {
				return nil, err
			}

			data.Add("step_ids", string(v))

		}
	}
	if params != nil && params.PageSize != nil {
		data.Set("page_size", fmt.Sprint(*params.PageSize))
	}
	if params != nil && params.PageToken != nil {
		data.Set("page_token", *params.PageToken)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &AutmoationsLinkStatsResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 400 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
