/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Marketing Campaigns Statistics API
* The Marketing Campaigns Stats API allows you to retrieve statistics for both Automations and Single Sends. The statistics provided include bounces, clicks, opens, and more. You can export stats in CSV format for use in other applications. You can also retrieve Marketing Campaigns stats in the [Marketing Campaigns application user interface](https://mc.sendgrid.com/).  This API provides statistics for Marketing Campaigns only. For stats related to event tracking, please see the [Stats API](https://docs.sendgrid.com/api-reference/stats).
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

type ListAutomationStatParam struct {
	// This endpoint returns all automation IDs if no `automation_ids` are specified.
	AutomationIds *[]string `json:"automation_ids,omitempty"`
	// The number of elements you want returned on each page.
	PageSize *int32 `json:"page_size,omitempty"`
	// The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.
	PageToken *string `json:"page_token,omitempty"`
}

func (params *ListAutomationStatParam) SetAutomationIds(AutomationIds []string) *ListAutomationStatParam {
	params.AutomationIds = &AutomationIds
	return params
}
func (params *ListAutomationStatParam) SetPageSize(PageSize int32) *ListAutomationStatParam {
	params.PageSize = &PageSize
	return params
}
func (params *ListAutomationStatParam) SetPageToken(PageToken string) *ListAutomationStatParam {
	params.PageToken = &PageToken
	return params
}

// **This endpoint allows you to retrieve stats for all your Automations.**  By default, all of your Automations will be returned, but you can specify a selection by passing in a comma-separated list of Automation IDs as the value of the query string parameter `automation_ids`.  Responses are paginated. You can limit the number of responses returned per batch using the `page_size` query string parameter. The default is 25, but you can specify a value between 1 and 50.  You can retrieve a specific page of responses with the `page_token` query string parameter.
func (c *ApiService) ListAutomationStat(params *ListAutomationStatParam) (interface{}, error) {
	path := "/v3/marketing/stats/automations"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.AutomationIds != nil {
		for _, item := range *params.AutomationIds {
			v, err := json.Marshal(item)

			if err != nil {
				return nil, err
			}

			data.Add("automation_ids", string(v))

		}
	}
	if params != nil && params.PageSize != nil {
		data.Set("page_size", fmt.Sprint(*params.PageSize))
	}
	if params != nil && params.PageToken != nil {
		data.Set("page_token", *params.PageToken)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &AutomationsResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 400 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
