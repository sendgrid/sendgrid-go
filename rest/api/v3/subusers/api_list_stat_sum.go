/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Subusers
* The Twilio SendGrid Subusers API allows you to create and manage your Subuser accounts. Subusers are available on [Pro and Premier plans](https://sendgrid.com/pricing), and you can think of them as sub-accounts. Each Subuser can have its own sending domains, IP addresses, and reporting. SendGrid recommends creating Subusers for each of the different types of emails you sendâ€”one Subuser for transactional emails and another for marketing emails. Independent Software Vendor (ISV) customers may also create Subusers for each of their customers.  You can also manage Subusers in the [Twilio SendGrid application user interface](https://app.sendgrid.com/settings/subusers). See [**Subusers**](https://docs.sendgrid.com/ui/account-and-settings/subusers) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

type ListStatSumParam struct {
	// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
	StartDate *string `json:"start_date"`
	// The direction you want to sort.
	SortByDirection *SortByDirection2 `json:"sort_by_direction,omitempty"`
	// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
	EndDate *string `json:"end_date,omitempty"`
	// Limits the number of results returned per page.
	Limit *int32 `json:"limit,omitempty"`
	// The point in the list to begin retrieving results from.
	Offset *int32 `json:"offset,omitempty"`
	// How to group the statistics. Defaults to today. Must follow format YYYY-MM-DD.
	AggregatedBy *string `json:"aggregated_by,omitempty"`
	// The metric that you want to sort by.  Must be a single metric.
	SortByMetric *string `json:"sort_by_metric,omitempty"`
}

func (params *ListStatSumParam) SetStartDate(StartDate string) *ListStatSumParam {
	params.StartDate = &StartDate
	return params
}
func (params *ListStatSumParam) SetSortByDirection(SortByDirection SortByDirection2) *ListStatSumParam {
	params.SortByDirection = &SortByDirection
	return params
}
func (params *ListStatSumParam) SetEndDate(EndDate string) *ListStatSumParam {
	params.EndDate = &EndDate
	return params
}
func (params *ListStatSumParam) SetLimit(Limit int32) *ListStatSumParam {
	params.Limit = &Limit
	return params
}
func (params *ListStatSumParam) SetOffset(Offset int32) *ListStatSumParam {
	params.Offset = &Offset
	return params
}
func (params *ListStatSumParam) SetAggregatedBy(AggregatedBy string) *ListStatSumParam {
	params.AggregatedBy = &AggregatedBy
	return params
}
func (params *ListStatSumParam) SetSortByMetric(SortByMetric string) *ListStatSumParam {
	params.SortByMetric = &SortByMetric
	return params
}

// **This endpoint allows you to retrieve the total sums of each email statistic metric for all subusers over the given date range.**
func (c *ApiService) ListStatSum(params *ListStatSumParam) (interface{}, error) {
	path := "/v3/subusers/stats/sums"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.StartDate != nil {
		data.Set("start_date", *params.StartDate)
	}
	if params != nil && params.SortByDirection != nil {
		data.Set("sort_by_direction", fmt.Sprint(*params.SortByDirection))
	}
	if params != nil && params.EndDate != nil {
		data.Set("end_date", *params.EndDate)
	}
	if params != nil && params.Limit != nil {
		data.Set("limit", fmt.Sprint(*params.Limit))
	}
	if params != nil && params.Offset != nil {
		data.Set("offset", fmt.Sprint(*params.Offset))
	}
	if params != nil && params.AggregatedBy != nil {
		data.Set("aggregated_by", *params.AggregatedBy)
	}
	if params != nil && params.SortByMetric != nil {
		data.Set("sort_by_metric", *params.SortByMetric)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &CategoryStats{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{StatusCode: resp.StatusCode, Body: resp.Body, Header: resp.Header}, nil
}
