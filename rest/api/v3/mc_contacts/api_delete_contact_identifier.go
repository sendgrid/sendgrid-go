/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Marketing Campaigns Contacts API
* The Twilio SendGrid Marketing Campaigns Contacts API allows you to manage all of your marketing contacts programmatically. You can also import and export contacts using this API. The Contacts API allows you to associate contacts with lists and segments; however, to manage the lists and segments themselves, see the [Lists API](https://docs.sendgrid.com/api-reference/lists/) and [Segments API](https://docs.sendgrid.com/api-reference/segmenting-contacts-v2/).  You can also manage your marketing contacts with the [Marketing Campaigns application user interface](https://mc.sendgrid.com/contacts). See [**How to Send Email with New Marketing Campaigns**](https://docs.sendgrid.com/ui/sending-email/how-to-send-email-with-marketing-campaigns) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"net/url"

	"strings"
)

type DeleteContactIdentifierParam struct {
	// Must be set to the `contact_id` of the contact you want to remove the identifier from.
	ContactId *string `json:"contact_id"`
	//
	DeleteContactIdentifierRequest *DeleteContactIdentifierRequest `json:"DeleteContactIdentifierRequest,omitempty"`
}

func (params *DeleteContactIdentifierParam) SetContactId(ContactId string) *DeleteContactIdentifierParam {
	params.ContactId = &ContactId
	return params
}
func (params *DeleteContactIdentifierParam) SetDeleteContactIdentifierRequest(DeleteContactIdentifierRequest DeleteContactIdentifierRequest) *DeleteContactIdentifierParam {
	params.DeleteContactIdentifierRequest = &DeleteContactIdentifierRequest
	return params
}

// **This endpoint can be used to delete one identifier from a contact.**  Deletion jobs are processed asynchronously.  Note this is different from deleting a contact. If the contact has only one identifier, the asynchronous request will fail. All contacts are required to have at least one identifier.  The request body field `identifier_type` must have a valid value of \"EMAIL\", \"PHONENUMBERID\", \"EXTERNALID\", or \"ANONYMOUSID\".
func (c *ApiService) DeleteContactIdentifier(params *DeleteContactIdentifierParam) (interface{}, error) {
	path := "/v3/marketing/contacts/{ContactId}/identifiers"
	if params != nil && params.ContactId != nil {
		path = strings.Replace(path, "{"+"ContactId"+"}", *params.ContactId, -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/json",
	}

	body := []byte{}
	if params != nil && params.DeleteContactIdentifierRequest != nil {
		b, err := json.Marshal(*params.DeleteContactIdentifierRequest)
		if err != nil {
			return nil, err
		}
		body = b
	}

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers, body...)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 202 {
		ps := &DeleteContactIdentifier202Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 400 {
		ps := &DeleteContact400Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 401 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 403 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 500 {
		ps := &SearchContact500Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{Status: resp.Status, StatusCode: resp.StatusCode, Body: resp.Body}, nil
}
