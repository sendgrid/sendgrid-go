/*
* This code was generated by
*
* SENDGRID-OAI-GENERATOR
*
* Twilio SendGrid Marketing Campaigns Contacts API
* The Twilio SendGrid Marketing Campaigns Contacts API allows you to manage all of your marketing contacts programmatically. You can also import and export contacts using this API. The Contacts API allows you to associate contacts with lists and segments; however, to manage the lists and segments themselves, see the [Lists API](https://docs.sendgrid.com/api-reference/lists/) and [Segments API](https://docs.sendgrid.com/api-reference/segmenting-contacts-v2/).  You can also manage your marketing contacts with the [Marketing Campaigns application user interface](https://mc.sendgrid.com/contacts). See [**How to Send Email with New Marketing Campaigns**](https://docs.sendgrid.com/ui/sending-email/how-to-send-email-with-marketing-campaigns) for more information.
*
* NOTE: This class is auto generated by OpenAPI Generator.
* https://openapi-generator.tech
* Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"strings"
)

type GetContactByIdentifiersParam struct {
	// The type of identifier to search for.
	IdentifierType *IdentifierType1 `json:"identifier_type"`
	//
	GetContactByIdentifiersRequest *GetContactByIdentifiersRequest `json:"GetContactByIdentifiersRequest,omitempty"`
}

func (params *GetContactByIdentifiersParam) SetIdentifierType(IdentifierType IdentifierType1) *GetContactByIdentifiersParam {
	params.IdentifierType = &IdentifierType
	return params
}
func (params *GetContactByIdentifiersParam) SetGetContactByIdentifiersRequest(GetContactByIdentifiersRequest GetContactByIdentifiersRequest) *GetContactByIdentifiersParam {
	params.GetContactByIdentifiersRequest = &GetContactByIdentifiersRequest
	return params
}

// **This endpoint allows you to retrieve up to 100 contacts matching the searched identifier values for one type of specified identifier.**  `identifier_type` must be a valid identifier type: `email`, `phone_number_id`, `external_id`, or `anonymous_id`.  This endpoint should be used in place of the [Search Contacts endpoint](https://www.twilio.com/docs/sendgrid/api-reference/contacts/search-contacts) when you can provide exact identifiers and do not need to include other [Segmentation Query Language (SGQL)](https://www.twilio.com/docs/sendgrid/for-developers/sending-email/segmentation-query-language/) filters when searching.  This endpoint returns a `200` status code when any contacts match the identifiers you supplied. When searching multiple identifiers in a single request, it is possible that some will match a contact while others will not. When a partially successful search like this is made, the matching contacts are returned in an object and an error message is returned for the identifiers that are not found.  This endpoint returns a `404` status code when no contacts are found for the provided identifiers.  A `400` status code is returned if any searched addresses are invalid.  Twilio SendGrid recommends exporting your contacts regularly as a backup to avoid issues or lost data.
func (c *ApiService) GetContactByIdentifiers(params *GetContactByIdentifiersParam) (interface{}, error) {
	path := "/v3/marketing/contacts/search/identifiers/{IdentifierType}"
	if params != nil && params.IdentifierType != nil {
		path = strings.Replace(path, "{"+"IdentifierType"+"}", fmt.Sprint(*params.IdentifierType), -1)
	}

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/json",
	}

	body := []byte{}
	if params != nil && params.GetContactByIdentifiersRequest != nil {
		b, err := json.Marshal(*params.GetContactByIdentifiersRequest)
		if err != nil {
			return nil, err
		}
		body = b
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers, body...)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		ps := &GetContactByIdentifiers200Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 400 {
		ps := &ContactsError{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 401 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 403 {
		ps := &ErrorResponse{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 404 {
		ps := &ContactsError{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	if resp.StatusCode == 500 {
		ps := &SearchContact500Response{}
		if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
			return nil, err
		}

		return ps, err
	}
	return http.Response{Status: resp.Status, StatusCode: resp.StatusCode, Body: resp.Body}, nil
}
